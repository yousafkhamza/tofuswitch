#!/bin/bash

# tofuswitch - A version switcher for OpenTofu
# Inspired by tfswitch, but specifically for OpenTofu

set -e

# Configuration
TOFU_INSTALL_DIR="${TOFU_INSTALL_DIR:-$HOME/.tofu/versions}"
TOFU_CURRENT_SYMLINK="${TOFU_CURRENT_SYMLINK:-$HOME/.tofu/current}"
GITHUB_RELEASES_URL="https://github.com/opentofu/opentofu/releases/download"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Ensure installation directories exist
mkdir -p "$TOFU_INSTALL_DIR"
mkdir -p "$(dirname "$TOFU_CURRENT_SYMLINK")"

# Function to list installed versions
list_installed_versions() {
    echo -e "${YELLOW}Installed OpenTofu versions:${NC}"
    if [ -d "$TOFU_INSTALL_DIR" ]; then
        local current_version=""
        if [ -L "$TOFU_CURRENT_SYMLINK" ]; then
            current_version=$(readlink "$TOFU_CURRENT_SYMLINK" | sed -E 's/.*tofu_([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
        fi

        # List only version directories and filter out non-version files
        local versions=$(cd "$TOFU_INSTALL_DIR" && \
            for d in tofu_*; do 
                if [[ -d "$d" && "$d" =~ ^tofu_([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
                    echo "${d#tofu_}"
                fi
            done | sort -V -r)

        if [ -z "$versions" ]; then
            echo "No versions installed."
        else
            while IFS= read -r version; do
                if [ "$version" == "$current_version" ]; then
                    echo -e "${GREEN}* ${version} (current)${NC}"
                else
                    echo "  ${version}"
                fi
            done <<< "$versions"
        fi
    else
        echo "No versions installed."
    fi
}

# Function to get installed versions as a list
get_installed_versions() {
    if [ -d "$TOFU_INSTALL_DIR" ]; then
        cd "$TOFU_INSTALL_DIR" && \
        for d in tofu_*; do 
            if [[ -d "$d" && "$d" =~ ^tofu_([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
                echo "${d#tofu_}"
            fi
        done | sort -V -r
    fi
}

# Function to get the latest version
get_latest_version() {
    local versions=$(curl -s https://api.github.com/repos/opentofu/opentofu/releases \
        | grep '"tag_name":' \
        | sed -E 's/.*"v?([^"]+)".*/\1/' \
        | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' \
        | sort -V -r \
        | head -n 1)
    
    if [ -z "$versions" ]; then
        echo -e "${RED}Failed to fetch versions from GitHub.${NC}"
        exit 1
    fi
    
    echo "$versions"
}

# Function to fetch and display available versions
fetch_available_versions() {
    echo -e "${YELLOW}Available OpenTofu versions:${NC}"
    local versions=$(curl -s https://api.github.com/repos/opentofu/opentofu/releases \
        | grep '"tag_name":' \
        | sed -E 's/.*"v?([^"]+)".*/\1/' \
        | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' \
        | sort -V -r)
    
    if [ -z "$versions" ]; then
        echo -e "${RED}Failed to fetch versions from GitHub.${NC}"
        exit 1
    fi

    # Get current version
    local current_version=""
    if [ -L "$TOFU_CURRENT_SYMLINK" ]; then
        current_version=$(readlink "$TOFU_CURRENT_SYMLINK" | sed -E 's/.*tofu_([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
    fi

    # Show all versions if --all flag is used
    if [ "$1" == "--all" ]; then
        # Get installed versions for marking
        local installed_versions=$(get_installed_versions)
        while IFS= read -r version; do
            if [ "$version" == "$current_version" ]; then
                echo -e "* ${version} (current)"
            elif echo "$installed_versions" | grep -q "^${version}$"; then
                echo -e "* ${version} (installed)"
            else
                echo "  ${version}"
            fi
        done <<< "$versions"
        return
    fi

    # Create array of versions
    mapfile -t version_array <<< "$versions"
    
    # Get installed versions for marking
    local installed_versions=$(get_installed_versions)
    
    # Show latest 5 versions with numbers
    echo "Latest versions (select a number to install):"
    for i in {0..4}; do
        if [ -n "${version_array[$i]}" ]; then
            if [ "${version_array[$i]}" == "$current_version" ]; then
                echo -e "$((i+1)). ${GREEN}${version_array[$i]} (current)${NC}"
            elif echo "$installed_versions" | grep -q "^${version_array[$i]}$"; then
                echo -e "$((i+1)). ${GREEN}${version_array[$i]} (installed)${NC}"
            else
                echo -e "$((i+1)). ${version_array[$i]}"
            fi
        fi
    done
    echo "6. Show all versions"
    echo -n "Enter number (1-6) or press Ctrl+C to cancel: "
    read selection

    case $selection in
        [1-5])
            local selected_version="${version_array[$((selection-1))]}"
            if [ -n "$selected_version" ]; then
                echo -e "\nInstalling OpenTofu version ${GREEN}${selected_version}${NC}"
                install_version "$selected_version"
            else
                echo -e "${RED}Invalid selection${NC}"
                exit 1
            fi
            ;;
        6)
            echo -e "\nAll available versions:"
            fetch_available_versions --all
            ;;
        *)
            echo -e "${RED}Invalid selection${NC}"
            exit 1
            ;;
    esac
}

# Function to remove a version
remove_version() {
    local version="$1"
    
    # If no version specified, show interactive menu
    if [ -z "$version" ]; then
        local installed_versions=($(get_installed_versions))
        local current_version=""
        if [ -L "$TOFU_CURRENT_SYMLINK" ]; then
            current_version=$(readlink "$TOFU_CURRENT_SYMLINK" | sed -E 's/.*tofu_([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
        fi

        if [ ${#installed_versions[@]} -eq 0 ]; then
            echo -e "${YELLOW}No versions installed.${NC}"
            exit 1
        fi

        echo -e "${YELLOW}Installed OpenTofu versions:${NC}"
        local i=1
        for ver in "${installed_versions[@]}"; do
            if [ "$ver" == "$current_version" ]; then
                echo -e "$i. ${GREEN}${ver} (current)${NC}"
            else
                echo -e "$i. ${ver}"
            fi
            i=$((i+1))
        done

        echo -n "Enter number to remove (or press Ctrl+C to cancel): "
        read selection

        if [[ "$selection" =~ ^[0-9]+$ ]] && [ "$selection" -ge 1 ] && [ "$selection" -le ${#installed_versions[@]} ]; then
            version="${installed_versions[$((selection-1))]}"
        else
            echo -e "${RED}Invalid selection${NC}"
            exit 1
        fi
    fi

    local target_dir="${TOFU_INSTALL_DIR}/tofu_${version}"

    # Check if version exists
    if [ ! -d "$target_dir" ]; then
        echo -e "${RED}Version ${version} is not installed.${NC}"
        echo "Available installed versions:"
        list_installed_versions
        exit 1
    fi

    # Check if this is the current version
    if [ "$(readlink "$TOFU_CURRENT_SYMLINK")" == "${target_dir}/tofu" ]; then
        echo -e "${RED}Cannot remove the current version. Switch to another version first.${NC}"
        exit 1
    fi

    rm -rf "$target_dir"
    echo -e "${GREEN}Removed OpenTofu v${version}.${NC}"
}

# Function to add shell autocompletion
_tofuswitch_completions() {
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"

    # Available commands
    local commands="list available install remove switch current latest help"

    # Subcommand completion
    case "${prev}" in
        install|remove|switch)
            # Combine remote versions with locally installed versions
            local remote_versions=$(curl -s https://api.github.com/repos/opentofu/opentofu/releases \
                | grep '"tag_name":' \
                | sed -E 's/.*"v?([^"]+)".*/\1/' \
                | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$')
            
            # Add locally installed versions for remove and switch commands
            local installed_versions=$(get_installed_versions)
            
            if [ "${prev}" = "remove" ] || [ "${prev}" = "switch" ]; then
                # For remove and switch, only suggest locally installed versions
                COMPREPLY=( $(compgen -W "${installed_versions}" -- "${cur}") )
            else
                # For install, suggest all versions
                COMPREPLY=( $(compgen -W "${remote_versions}" -- "${cur}") )
            fi
            return 0
            ;;
    esac

    # Main command completion
    COMPREPLY=( $(compgen -W "${commands}" -- "${cur}") )
    return 0
}

# Register autocompletion
complete -F _tofuswitch_completions tofuswitch

# Function to install a version
install_version() {
    local version="$1"
    local target_dir="${TOFU_INSTALL_DIR}/tofu_${version}"
    local download_url="${GITHUB_RELEASES_URL}/v${version}/tofu_${version}_linux_amd64.tar.gz"
    local temp_dir=$(mktemp -d)

    # Check if version is already installed
    if [ -d "$target_dir" ]; then
        echo -e "${YELLOW}OpenTofu v${version} is already installed.${NC}"
        # Switch to this version even if already installed
        switch_version "$version"
        rm -rf "$temp_dir"
        return
    fi

    # Create target directory
    mkdir -p "$target_dir"

    # Download and extract version to temp directory
    echo -e "\nDownloading OpenTofu v${version}..."
    if curl -s -L "$download_url" | tar -xz -C "$temp_dir"; then
        # Move only the tofu binary to the target directory
        mv "$temp_dir/tofu" "$target_dir/"
        
        # Clean up temp directory
        rm -rf "$temp_dir"

        # Always switch to the newly installed version
        rm -f "$TOFU_CURRENT_SYMLINK"
        ln -s "$target_dir/tofu" "$TOFU_CURRENT_SYMLINK"

        echo -e "${GREEN}Installed OpenTofu v${version} and switched to it.${NC}"
    else
        echo -e "${RED}Failed to download OpenTofu v${version}.${NC}"
        rm -rf "$temp_dir"
        rm -rf "$target_dir"
        exit 1
    fi
}

# Function to switch OpenTofu version
switch_version() {
    local version="$1"
    local target_dir="${TOFU_INSTALL_DIR}/tofu_${version}"

    # If no version specified, show installed versions and guide user
    if [ -z "$version" ]; then
        echo -e "${YELLOW}Please specify a version to switch to.${NC}"
        echo "Available installed versions:"
        list_installed_versions
        echo -e "\nUsage: tofuswitch switch <version>"
        exit 1
    fi

    # Check if version exists
    if [ ! -d "$target_dir" ]; then
        echo -e "${RED}Version ${version} is not installed.${NC}"
        echo "Available installed versions:"
        list_installed_versions
        echo -e "\nTo install this version, run: tofuswitch install ${version}"
        exit 1
    fi

    # Update symlink
    rm -f "$TOFU_CURRENT_SYMLINK"
    ln -s "${target_dir}/tofu" "$TOFU_CURRENT_SYMLINK"
    echo -e "${GREEN}Switched to OpenTofu v${version}${NC}"
}

# Main script logic
case "$1" in
    list)
        list_installed_versions
        ;;
    available)
        if [ "$2" == "--all" ]; then
            fetch_available_versions --all
        else
            fetch_available_versions
        fi
        ;;
    install)
        if [ -z "$2" ]; then
            fetch_available_versions
            exit 0
        fi
        install_version "$2"
        ;;
    switch)
        switch_version "$2"
        ;;
    remove)
        remove_version "$2"
        ;;
    current)
        if [ -L "$TOFU_CURRENT_SYMLINK" ]; then
            readlink "$TOFU_CURRENT_SYMLINK" | sed 's/.*tofu_\([^/]*\).*/\1/'
        else
            echo -e "${RED}No current OpenTofu version set.${NC}"
        fi
        ;;
    latest)
        echo -e "${YELLOW}Installing latest version of OpenTofu...${NC}"
        latest_version=$(get_latest_version)
        if [ -n "$latest_version" ]; then
            install_version "$latest_version"
        fi
        ;;
    help|*)
        echo "tofuswitch - OpenTofu Version Manager"
        echo "Usage:"
        echo "  $0 list           # List installed versions"
        echo "  $0 available      # List and select available versions"
        echo "  $0 install <ver>  # Install specific version (or latest)"
        echo "  $0 latest         # Install latest stable version"
        echo "  $0 switch <ver>   # Switch to specific version"
        echo "  $0 remove <ver>   # Remove specific version"
        echo "  $0 current        # Show current version"
        exit 1
        ;;
esac